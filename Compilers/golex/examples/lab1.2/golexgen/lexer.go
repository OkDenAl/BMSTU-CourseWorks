// Code generated by golex utility; DO NOT EDIT.
package golexgen

import (
	"fmt"
	"unicode"
)

type FiniteState struct {
	NextState      int
	CurrentState   int
	TerminalStates []int
	Transitions    map[int]map[rune]int
}

func (f *FiniteState) FindMatchEndIndex(input string) int {
	f.CurrentState = 0
	i := 0
	for _, ch := range input {
		if !f.consume(ch) {
			break
		}
		i++
	}

	if f.isTerminal(f.CurrentState) {
		return i
	}

	return 0
}

func (f *FiniteState) consume(ch rune) bool {
	return f.transition(f.CurrentState, ch)
}

func (f *FiniteState) transition(from int, ch rune) bool {

	if to, ok := f.Transitions[from][ch]; ok {
		f.CurrentState = to
		return true
	}

	return false
}

func (f *FiniteState) isTerminal(state int) bool {
	for _, val := range f.TerminalStates {
		if state == val {
			return true
		}
	}
	return false
}

var (
	automataSkip *FiniteState = &FiniteState{
		CurrentState:   0,
		TerminalStates: []int{4, 5, 6, 1, 2, 3, 3},
		Transitions: map[int]map[rune]int{
			0: {9: 1, 10: 2, 32: 3},
			1: {9: 4, 10: 5, 32: 6},
			2: {9: 4, 10: 5, 32: 6},
			3: {9: 4, 10: 5, 32: 6},
			4: {9: 4, 10: 5, 32: 6},
			5: {9: 4, 10: 5, 32: 6},
			6: {9: 4, 10: 5, 32: 6},
		},
	}
	automataAssembly *FiniteState = &FiniteState{
		CurrentState:   0,
		TerminalStates: []int{3, 6},
		Transitions: map[int]map[rune]int{
			0: {101: 4, 109: 1},
			1: {111: 2},
			2: {118: 3},
			4: {97: 5},
			5: {120: 6},
		},
	}
	automataIdent *FiniteState = &FiniteState{
		CurrentState:   0,
		TerminalStates: []int{1, 0},
		Transitions: map[int]map[rune]int{
			0: {97: 1, 98: 1, 99: 1, 100: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1, 108: 1, 109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 114: 1, 115: 1, 116: 1, 117: 1, 118: 1, 119: 1, 120: 1, 121: 1, 122: 1},
			1: {97: 1, 98: 1, 99: 1, 100: 1, 101: 1, 102: 1, 103: 1, 104: 1, 105: 1, 106: 1, 107: 1, 108: 1, 109: 1, 110: 1, 111: 1, 112: 1, 113: 1, 114: 1, 115: 1, 116: 1, 117: 1, 118: 1, 119: 1, 120: 1, 121: 1, 122: 1},
		},
	}
	automataNum *FiniteState = &FiniteState{
		CurrentState:   0,
		TerminalStates: []int{1, 0},
		Transitions: map[int]map[rune]int{
			0: {48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1},
			1: {48: 1, 49: 1, 50: 1, 51: 1, 52: 1, 53: 1, 54: 1, 55: 1, 56: 1, 57: 1},
		},
	}
)

type ErrHandler interface {
	Error(msg string, pos Position, symbol string)
}

type ErrHandlerBase struct{}

func (e *ErrHandlerBase) Error(msg string, pos Position, symbol string) {
	fmt.Printf("%s %s %s\n", msg, pos.String(), symbol)
}

type LexemHandler interface {
	ErrHandler
	Skip(text []rune, start, end Position) *Token
	Assembly(text []rune, start, end Position) *Token
	Ident(text []rune, start, end Position) *Token
	Num(text []rune, start, end Position) *Token
}

type Tag interface {
	GetTag() string
}

const EOP = "EOP"

type EOPTag struct{}

func (e EOPTag) GetTag() string {
	return EOP
}

type Token struct {
	tag    Tag
	coords Fragment
	val    string
}

func NewToken(tag Tag, starting, following Position, val string) Token {
	return Token{tag: tag, coords: NewFragment(starting, following), val: val}
}

func (t Token) String() string {
	return fmt.Sprintf("%s %s: %s", t.tag.GetTag(), t.coords, t.val)
}

func (t Token) Tag() string {
	return t.tag.GetTag()
}

type Fragment struct {
	starting  Position
	following Position
}

func NewFragment(starting, following Position) Fragment {
	return Fragment{starting: starting, following: following}
}

func (f Fragment) String() string {
	return fmt.Sprintf("%s-%s", f.starting.String(), f.following.String())
}

type Position struct {
	line  int
	pos   int
	index int
	text  []rune
}

func NewPosition(text []rune) Position {
	return Position{text: text, line: 1, pos: 1}
}

func (p *Position) String() string {
	return fmt.Sprintf("(%d,%d)", p.line, p.pos)
}

func (p *Position) cp() int {
	if p.index == len(p.text) {
		return -1
	}
	return int(p.text[p.index])
}

func (p *Position) isWhiteSpace() bool {
	return p.cp() == ' '
}

func (p *Position) isLetter() bool {
	return unicode.IsLetter(rune(p.cp()))
}

func (p *Position) isNewLine() bool {
	return p.cp() == '\n'
}

func (p *Position) Index() int {
	return p.index
}

func (p *Position) next() Position {
	if p.index < len(p.text) {
		if p.isNewLine() {
			p.line++
			p.pos = 1
		} else {
			p.pos++
		}
		p.index++
	}

	return *p
}

type Scanner struct {
	program []rune
	handler LexemHandler
	regexps []*FiniteState
	curPos  Position
}

func NewScanner(program []rune, handler LexemHandler) Scanner {
	regexps := make([]*FiniteState, 0, 4)
	regexps = append(regexps, automataSkip)
	regexps = append(regexps, automataAssembly)
	regexps = append(regexps, automataIdent)
	regexps = append(regexps, automataNum)

	return Scanner{program: program, handler: handler, regexps: regexps, curPos: NewPosition(program)}
}

func (s *Scanner) findToken(automata *FiniteState, start, end Position) *Token {
	switch automata {
	case automataSkip:
		return s.handler.Skip(s.program, start, end)
	case automataAssembly:
		return s.handler.Assembly(s.program, start, end)
	case automataIdent:
		return s.handler.Ident(s.program, start, end)
	case automataNum:
		return s.handler.Num(s.program, start, end)

	}
	return nil
}

func (s *Scanner) NextToken() Token {
	for s.curPos.cp() != -1 {
		start := s.curPos.index

		var maxRightReg *FiniteState
		maxRight := 0

		for _, r := range s.regexps {
			res := r.FindMatchEndIndex(string(s.program[s.curPos.index:]))
			if res > maxRight {
				maxRightReg = r
				maxRight = res
			}
		}
		startPos := s.curPos
		var pos Position
		for s.curPos.index != start+maxRight {
			pos = s.curPos
			s.curPos.next()
		}
		pos.index++

		if maxRight == 0 {
			if s.curPos.cp() != -1 {
				s.curPos.next()
			} else {
				break
			}
			s.handler.Error("unknown symbol", startPos, string(s.program[start]))
		} else {
			tok := s.findToken(maxRightReg, startPos, pos)
			if tok != nil {
				return *tok
			}
		}
	}

	return NewToken(EOPTag{}, s.curPos, s.curPos, "")
}
